import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as a,a as e,f as n,e as i,o as p}from"./app-BjCY-e0R.js";const o="/assets/img1-Bx_rn_tb.png",l="/assets/img2-DuBHclXU.png",c="/assets/img3-C63-w-nr.png",g="/assets/img4-Bj-vGVpv.png",h="/assets/img5-CEkSChhE.png",m="/assets/img6-Bbk6Az19.png",b="/assets/img7-CltofbuL.png",d="/assets/img8-EJ3bNvsm.png",_="/assets/img9-ksgAJzgE.png",f="/assets/img10-DU5z_bSi.png",y="/assets/img11-U7_E2O8n.png",P="/assets/img12-Ce-R3FTm.png",D="/assets/img13-DkdutKy2.png",u="/assets/img14-CMI5tnoJ.png",I="/assets/img15-De0Yckz1.png",x="/assets/img16-iY8EdRaw.png",z="/assets/img17-6J1dQMlO.png",A="/assets/img18-BXnm_Tqb.png",T="/assets/img19-C-JX1e98.png",v="/assets/img20-DQkLfC5v.png",C="/assets/img21-cz2wA4tI.png",w="/assets/img22-D5irAiJT.png",E="/assets/img23-Pvg3V01Q.png",N="/assets/img23-1-3kPj4lup.png",k="/assets/img23-2-B8pOkEwg.png",B="/assets/img23-3-o88-hVTV.png",K="/assets/img24-Nu0bN1mo.png",V="/assets/img25-0D2hBZ1-.png",J="/assets/img26-A0bbF6Tg.png",Z="/assets/img28-a24FYNzy.png",L={};function M(O,r){return p(),t("div",null,[r[0]||(r[0]=a("div",{class:"hint-container tip"},[a("p",{class:"hint-container-title"},"提示"),a("p",null,[i("PID控制算法的使用非常广泛！"),a("br"),a("br"),i(" 是电路控制中必学的算法。")])],-1)),e(" more "),r[1]||(r[1]=n('<h1 id="pid算法学习笔记" tabindex="-1"><a class="header-anchor" href="#pid算法学习笔记"><span>PID算法学习笔记</span></a></h1><h1 id="引入" tabindex="-1"><a class="header-anchor" href="#引入"><span>引入</span></a></h1><p>  PID控制算法是结合比例、积分和微分三种环节于一体的控制算法，它是连续系统中技术最为成熟、应用最为广泛的一种控制算法，该控制算法出现于20世纪30至40年代，适用于对被控对象模型了解不清楚的场合。<br><br>   实际运行的经验和理论的分析都表明，运用这种控制规律对许多工业过程进行控制时，都能得到比较满意的效果。PID控制 的实质就是根据输入的偏差值，按照比例、积分、微分的函数关系进行运算，运算结果用以控制输出。</p><h2 id="适用系统" tabindex="-1"><a class="header-anchor" href="#适用系统"><span>适用系统</span></a></h2><p>满足线性高斯系统<br><br> 线性高斯性：</p><ul><li>1、齐次性: ky=f(kx)</li><li>2、叠加性: y1+y2=f(x1)+f(x2)=f(x1+x2)</li><li>高斯性：噪声满足正太分布<br><br><img src="'+o+'" alt="img1" loading="lazy"></li></ul><h3 id="细化适用系统" tabindex="-1"><a class="header-anchor" href="#细化适用系统"><span>细化适用系统</span></a></h3><p>准确地来说是适用二阶以内的线性系统(数学表达如图)<br><br><img src="'+l+'" alt="img2" loading="lazy"><br><a href="https://www.bilibili.com/video/BV1Rh41117MT" target="_blank" rel="noopener noreferrer">卡尔曼滤波视频链接</a></p><ul><li>一阶系统举例<br><br>  <img src="'+c+'" alt="img3" loading="lazy"></li><li>二阶系统举例<br><br>  <img src="'+g+'" alt="img4" loading="lazy"></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>高阶系统若可以简化为二阶系统有可能适用PID算法</li><li>非线性系统通过<a href="https://zhuanlan.zhihu.com/p/58738073" target="_blank" rel="noopener noreferrer">李雅普诺夫定理</a>在非线性系统平衡点处线性化也可能适用PID算法。</li></ul></div><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p><a href="https://baike.baidu.com/item/PID%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener noreferrer">来自百度百科-PID算法</a></p><h3 id="pid控制原理" tabindex="-1"><a class="header-anchor" href="#pid控制原理"><span>PID控制原理</span></a></h3><p>闭环控制是根据控制对象输出反馈来进行校正的控制方式，它是在测量出实际与计划发生偏差时，按定额或标准来进行纠正的。比如控制一个电机的转速，就得有一个测量转速的传感器，并将结果反馈到控制路线上。提到闭环控制算法，不得不提PID，它是闭环控制算法中最简单的一种。PID是比例 (Proportion) 积分 ,(Integral) 微分 ,(Differential coefficient) 的缩写，分别代表了三种控制算法。通过这三个算法的组合可有效地纠正被控制对象的偏差，从而使其达到一个稳定的状态。</p><h3 id="pid参数调节" tabindex="-1"><a class="header-anchor" href="#pid参数调节"><span>PID参数调节</span></a></h3><p>在整定PID控制器参数时，可以根据控制器的参数与系统动态性能和稳态性能之间的定性关系，用实验的方法来调节控制器的参数。有经验的调试人员一般可以较快地得到较为满意的调试结果。在调试中最重要的问题是在系统性能不能令人满意时，知道应该调节哪一个参数，该参数应该增大还是减小。</p><h2 id="开环控制系统" tabindex="-1"><a class="header-anchor" href="#开环控制系统"><span>开环控制系统</span></a></h2><h3 id="一般开环控制系统框图" tabindex="-1"><a class="header-anchor" href="#一般开环控制系统框图"><span>一般开环控制系统框图</span></a></h3><p>如：水流量控制开关<br><br><img src="'+h+'" alt="img5" loading="lazy"><br><br> 缺点：<br> 无反馈，导致无法自动调节。</p><h3 id="前馈控制系统框图" tabindex="-1"><a class="header-anchor" href="#前馈控制系统框图"><span>前馈控制系统框图</span></a></h3><p>如：水流量控制开关<br><br><img src="'+m+'" alt="img6" loading="lazy"><br><br> 若不存在干扰则直接作用于对象。若有干扰则检测干扰，利用控制器计算出<code>补偿</code>然后输出给执行器再作用到对象。</p><h2 id="闭环控制系统" tabindex="-1"><a class="header-anchor" href="#闭环控制系统"><span>闭环控制系统</span></a></h2><h3 id="单闭环" tabindex="-1"><a class="header-anchor" href="#单闭环"><span>单闭环</span></a></h3><p>如：水流量控制开关<br><br> 系统框图<br><img src="'+b+'" alt="img7" loading="lazy"><br><br> 与一般开环系统多一个反馈。</p><h3 id="双闭环" tabindex="-1"><a class="header-anchor" href="#双闭环"><span>双闭环</span></a></h3><p>如：水位控制开关<br><br>系统框图<br><img src="'+d+'" alt="img8" loading="lazy"><br><br>与一般单闭环控制系统多一个闭环，外层的环叫外环，内层叫内环。<br><br>传感器是人的眼睛，观察反馈信息，控制器1为人脑，根据水位变化做出计算。<br><br>控制器2也为人脑，用于做其他任务（运算）。<br><br>执行器是水阀，直接控制副对象（管道），进而影响水箱（主对象）。</p><p><strong>控制过程</strong><br><br> 以下图为例<br><br><img src="'+_+'" alt="img9" loading="lazy"><br><br>水位1m为我们的期望输出，与我们实际输出作差后得到E1，利用E1输入控制器控制再与实际流量做差，经过运算得到E2，最终决定水管加大/减小。做出执行后，作用给副对象。<br><br>优缺点：可以控制内环的流量，但流量是随动的，可能会在1L/s~2L/s变化，可以加快对水位的控制。利用内环控制稳定性，则外环控制起来会方便很多。</p><h2 id="复合控制系统" tabindex="-1"><a class="header-anchor" href="#复合控制系统"><span>复合控制系统</span></a></h2><p>前馈-反馈符合控制系统<br><br>系统框图如下<br><br><img src="'+f+'" alt="img10" loading="lazy"><br><br>框图解释：<br><br><img src="'+y+'" alt="img11" loading="lazy"><br><br>前馈环（上方的环）作补偿即过滤干扰。反馈环根据实际的流量对系统做出反馈进行必要的补偿。</p><h2 id="参数详解" tabindex="-1"><a class="header-anchor" href="#参数详解"><span>参数详解</span></a></h2><h3 id="误差" tabindex="-1"><a class="header-anchor" href="#误差"><span>误差</span></a></h3><p>期望输出-实际输出</p><h3 id="控制器输出" tabindex="-1"><a class="header-anchor" href="#控制器输出"><span>控制器输出</span></a></h3><p>控制器经过对E的处理（PID运算）得到的值。</p><h3 id="执行器输出" tabindex="-1"><a class="header-anchor" href="#执行器输出"><span>执行器输出</span></a></h3><p>直接作用到对象的输出（对应图中就是阀门打开的大小）</p><h3 id="系统输出" tabindex="-1"><a class="header-anchor" href="#系统输出"><span>系统输出</span></a></h3><p>即为实际输出</p><h2 id="连续与离散信号" tabindex="-1"><a class="header-anchor" href="#连续与离散信号"><span>连续与离散信号</span></a></h2><p>1、图形表示<br><br><img src="'+P+'" alt="img12" loading="lazy"><br><br> 2、数学表达式<br><br><img src="'+D+'" alt="img13" loading="lazy"><br></p><ul><li>积分是信号的表达式；</li><li>连续信号微分为离散信号表达</li></ul><h1 id="pid理论学习" tabindex="-1"><a class="header-anchor" href="#pid理论学习"><span>PID理论学习</span></a></h1><h2 id="pid公式" tabindex="-1"><a class="header-anchor" href="#pid公式"><span>PID公式</span></a></h2><h3 id="抽象派-教科书式" tabindex="-1"><a class="header-anchor" href="#抽象派-教科书式"><span>抽象派（教科书式）</span></a></h3><p>数学公式如图所示：<br><br><img src="'+u+'" alt="img14" loading="lazy"><br><br> C为输出，e为误差，P为比例度，Ti为时间积分时间，Td为微分时间。<code>p</code>/<code>i</code>/<code>d</code>为我们所需调节的参数。<br><br>但在实际使用（计算机内使用）会归一化<br><br> 即以上<strong>连续</strong>PID公式和<strong>离散</strong>PID公式。换之为调Kp、Ki、Kd三个参数（系数）。<br><br>离散PID公式将△t归一化得到以下公式<br><br><img src="'+I+'" alt="img15" loading="lazy"><br></p><h3 id="pid形象解释" tabindex="-1"><a class="header-anchor" href="#pid形象解释"><span>PID形象解释</span></a></h3><p><img src="'+x+'" alt="img16" loading="lazy"><br><br></p><ul><li><p>P的控制作用<br> 实例：<br><br><img src="'+z+'" alt="img17" loading="lazy"><br><br>在小车控制系统中，P主要控制小车驱动(速度)<br><br>此时，小车距离与速度变化曲线图<br><br><img src="'+A+'" alt="img18" loading="lazy"><br><br>可见，P只能无限接近期望值，不会完全等于期望值。<br><br>P控制产生的实际值与期望值的误差称 <code>稳态误差</code></p></li><li><p>i的控制作用<br><img src="'+T+'" alt="img19" loading="lazy"><br><br>当误差达到1时P(比例)项不会再变，因此无法达到预期值。<br><br>i提供积分作用，使误差1无限接近0最终达到预期。<br><br>但PI调节到误差为0时,P得到的值为0,不再提供动力。<br><br>但I值不会因P值改变而收到影响，只会停止积累误差，可实现无人机悬停。<br><br>示意图:<br><br><img src="'+v+'" alt="img20" loading="lazy"></p></li><li><p>d的控制系统<br><img src="'+C+'" alt="img21" loading="lazy"><br><br>前段区域P项与I项过大的输出可能会瞬间超过预期，为防止此情况发生引入D。<br><br>D项给负的信号输出，防止误差小于0。<br><br>PID综合示意图:<br><br><img src="'+w+'" alt="img22" loading="lazy"></p></li></ul><h2 id="调参" tabindex="-1"><a class="header-anchor" href="#调参"><span>调参</span></a></h2><p>调参示意图：<br><br><img src="'+E+'" alt="img23" loading="lazy"></p><h2 id="补充相关控制知识" tabindex="-1"><a class="header-anchor" href="#补充相关控制知识"><span>补充相关控制知识</span></a></h2><h3 id="积分限幅" tabindex="-1"><a class="header-anchor" href="#积分限幅"><span>积分限幅</span></a></h3><p>先上图<br><img src="'+N+'" alt="img23-1" loading="lazy"><br> 当E不变时P不受影响，为了防止PID输出过大，需要对I进行限幅。<br><img src="'+k+'" alt="img23-2" loading="lazy"><br> 在程序内设定一个固定值，防止I过大，以至不会超调货超调幅度不大。</p><h3 id="积分分离" tabindex="-1"><a class="header-anchor" href="#积分分离"><span>积分分离</span></a></h3><p>当目标值增大时E会增大，如果E增大的值很大的话，P与I同时作用会导致PID总输出值过大而导致系统超调<br> 为了防止此情况，我们需要对其进行积分分离<br><img src="'+B+'" alt="img23-3" loading="lazy"><br> 在程序内判断E的值，<br> 例：当目标值突增，E大于500时，Ki影响极大，所以我们不将Ki启用，即Ki=0<br> 此时PID总输出仅有Kp作用，到E小于500后Ki慢慢累加，系统输出由Ki与Kp作用。<br> 这样可以防止系统超调。</p><h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践"><span>实践</span></a></h2><p>控制框图<br><br><img src="'+K+'" alt="img24" loading="lazy"><br> 主控发送值-&gt;PID输出值 遵循C620电调协议(CAN协议-控制器局域网络)</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>补充<br> CAN总线网络主要挂在CAN_H和CAN_L，各个节点通过这两条线实现信号的串行差分传输，为了避免信号的反射和干扰，还需要在CAN_H和CAN_L之间接上120欧姆的终端电阻.<br> 更多详解可以参照 <a href="https://www.cnblogs.com/kmust/p/9572178.html" target="_blank" rel="noopener noreferrer">CAN总线协议</a></p></div><p>下图<br><img src="'+V+'" alt="img25" loading="lazy"><br> 如果设Motor的ID为1，则CAN包内的0、1字节为PID的输出值<br> 实际控制过程如下:<br><img src="'+J+'" alt="img26" loading="lazy"><br> id1的包反馈数据里面包含一些数据，通过提取其中的速度(即PID的实际输出)传回主控<br> 主控将期望与反馈回来的速度作差再传入CAN包DATA0与DATA1形成闭环。</p><h3 id="代码实例" tabindex="-1"><a class="header-anchor" href="#代码实例"><span>代码实例</span></a></h3><figure><img src="'+Z+'" alt="img28" tabindex="0" loading="lazy"><figcaption>img28</figcaption></figure><h2 id="结束" tabindex="-1"><a class="header-anchor" href="#结束"><span>结束</span></a></h2>',62))])}const j=s(L,[["render",M]]),F=JSON.parse('{"path":"/views/algorithm/pidAlgorithm.html","title":"PID算法学习笔记","lang":"zh-CN","frontmatter":{"title":"PID算法学习笔记","date":"2022-05-03T00:00:00.000Z","cover":"https://api.iin0.cn/img/acc","tags":["PID算法"],"categories":["学习"],"description":"提示 PID控制算法的使用非常广泛！ 是电路控制中必学的算法。","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PID算法学习笔记\\",\\"image\\":[\\"https://api.iin0.cn/img/acc\\"],\\"datePublished\\":\\"2022-05-03T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-16T13:44:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"暮色音铃Twiyin0\\"}]}"],["meta",{"property":"og:url","content":"https://blog.iin0.cn/views/algorithm/pidAlgorithm.html"}],["meta",{"property":"og:site_name","content":"音铃的博客"}],["meta",{"property":"og:title","content":"PID算法学习笔记"}],["meta",{"property":"og:description","content":"提示 PID控制算法的使用非常广泛！ 是电路控制中必学的算法。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://api.iin0.cn/img/acc"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-16T13:44:21.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://api.iin0.cn/img/acc"}],["meta",{"name":"twitter:image:alt","content":"PID算法学习笔记"}],["meta",{"property":"article:tag","content":"PID算法"}],["meta",{"property":"article:published_time","content":"2022-05-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-16T13:44:21.000Z"}]]},"git":{"createdTime":1677920831000,"updatedTime":1747403061000,"contributors":[{"name":"Twiyin0","username":"Twiyin0","email":"yinlingcchan@outlook.com","commits":3,"url":"https://github.com/Twiyin0"},{"name":"vlssu","username":"vlssu","email":"43847794+vlssu@users.noreply.github.com","commits":1,"url":"https://github.com/vlssu"}]},"readingTime":{"minutes":7.49,"words":2247},"filePathRelative":"views/algorithm/pidAlgorithm.md","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>PID控制算法的使用非常广泛！<br><br>\\n是电路控制中必学的算法。</p>\\n</div>\\n","autoDesc":true}');export{j as comp,F as data};
